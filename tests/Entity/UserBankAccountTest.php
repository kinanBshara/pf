<?php

namespace App\Tests\Entity;

use App\Entity\UserBankAccount;
use App\Kernel;
use App\Service\TransactionService;
use Doctrine\ORM\EntityManagerInterface;
use PHPUnit\Framework\TestCase;
use Symfony\Bridge\Doctrine\ManagerRegistry;

class UserBankAccountTest extends TestCase
{
    private TransactionService $transactionService;

    protected function setUp(): void
    {
        // Start mocking
        $entityManagerMock = $this->getMockBuilder(EntityManagerInterface::class)
            ->disableOriginalConstructor()
            ->getMock();
        // End mocking
        $this->transactionService = new TransactionService($entityManagerMock);


        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider  getUserBankAccountDataProvider
     */
    public function testUserBankAccountTransactions(
        UserBankAccount $userBankAccount,
        int $amount,
        int $expected,
        string $transactionType
    )
    {
        $result = match($transactionType) {
            UserBankAccount::TRANSACTION_DEBIT => $this->transactionService->debit($amount, $userBankAccount),
            UserBankAccount::TRANSACTION_CREDIT => $this->transactionService->credit($amount, $userBankAccount)
        };
        $this->assertEquals($expected, $result);
    }

    public function getUserBankAccountDataProvider()
    {
        # Credit +200
        $userBankAccount1 = new UserBankAccount();
        $userBankAccount1
            ->setFullName('AmÃ©lie')
            ->setEmail('amelie@test.com')
            ->setBalance(400);

            $amount = 200;
            $expected = 200;
            yield[$userBankAccount1, $amount, $expected, UserBankAccount::TRANSACTION_CREDIT];

        # Debit -150
        $userBankAccount2 = new UserBankAccount();
        $userBankAccount2
            ->setFullName('Thomas')
            ->setEmail('thomas@test.com')
            ->setBalance(100);

        $amount1 = 150;
        $expected1 = 100;
        yield[$userBankAccount2, $amount1, $expected1, UserBankAccount::TRANSACTION_DEBIT];


        # Credit +300
        $userBankAccount3 = new UserBankAccount();
        $userBankAccount3
            ->setFullName('Ashley')
            ->setEmail('ashley@test.com')
            ->setBalance(900);

        $amount2 = 300;
        $expected2 = 100;
        yield[$userBankAccount3, $amount2, $expected2, UserBankAccount::TRANSACTION_CREDIT];


        # Debit -750
        $userBankAccount4 = new UserBankAccount();
        $userBankAccount4
            ->setFullName('Tom')
            ->setEmail('tom@test.com')
            ->setBalance(600);

        $amount3 = 0;
        $expected3 = 600;
        yield[$userBankAccount4, $amount3, $expected3, UserBankAccount::TRANSACTION_DEBIT];

    }
}
